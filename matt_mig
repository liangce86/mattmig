#!/usr/bin/env python
#coding:utf8
#author:liangce
import os,re,sys,datetime
import MySQLdb,time
from getpass import getpass
db_bk = 0
rdb_check = 0
class matt(object):
      db1_check = 0
      #db_bk = 0

      def dbsinfo(self,bhost='',bport='',buser='',bpassword='',bdatabase1='',bdatabase2='',bdatabase3=''):
          if not bhost:
              bhost = (input("请输入源库地址：")).strip()
          if not bport:
              while True:
                  try:
                        bport = int(input("请输入源库端口："))
                        break
                  except:
                        print("请输入数字格式")
          if not buser:
              buser = (input("请输入迁移账号：")).strip()
          if not bpassword:
              bpassword = getpass("请输入迁移账号密码: ")
          self.bhost = bhost
          self.bport = bport
          self.buser = buser
          self.bpassword = bpassword

          if not bdatabase1:
              while True:
                   global db1_check
                   global db_bk
                   bdatabase1 = (input("请输入迁移库名1: ")).strip()
                   self.bdatabase1 = bdatabase1
                   database = self.bdatabase1
                   self.checkdb(database)
                   if db1_check == 1:
                        #print(db1_check)
                        break
                   else:
                        try: 
                             nodb = int(input('如果忽略此选项，请输入"1",继续输入库名请输入"2": '))
                             if nodb == 1:
                                 break
                             elif nodb == 2:
                                 pass
                        except:
                             print("输入错误")

                   
          if not bdatabase2:
              while True:
                   global db1_check1
                   global db_bk
                   bdatabase2 = (input("请输入迁移库名2: ")).strip()
                   self.bdatabase2 = bdatabase2
                   database = self.bdatabase2
                   self.checkdb(database)
                   if db1_check == 1:
                        break
                   else:
                        try:
                             nodb = int(input('如果忽略此选项，请输入"1",继续输入库名请输入"2": '))
                             if nodb == 1:
                                 break
                             elif nodb == 2:
                                 pass
                        except:
                             print("输入错误")

          if not bdatabase3:
              while True:
                   global  db1_check1
                   global  db_bk
                   bdatabase3 = (input("请输入迁移库名3: ")).strip()
                   self.bdatabase3 = bdatabase3
                   database = self.bdatabase3
                   self.checkdb(database)
                   if db1_check == 1:
                        break
                   else:
                        try:
                             nodb = int(input('如果忽略此选项，请输入"1",继续输入库名请输入"2": '))
                             if nodb == 1:
                                 break
                             elif nodb == 2:
                                 pass
                        except:
                             print("输入错误")




    
      def dbrinfo(self,rhost='',rport='',ruser='',rpassword=''):
          if not rhost:
              rhost = (input("请输入目的库地址：")).strip()
          if not rport:
              while True:
                  try:
                        rport = int(input("请输入目的库端口："))
                        break
                  except:
                        print("请输入数字格式")
          if not ruser:
              ruser = (input("请输入账号：")).strip()
          if not rpassword:
              rpassword = getpass("请输入密码: ")
          self.rhost=rhost
          self.rport=rport
          self.ruser=ruser
          self.rpassword = rpassword
          self.check_rdb()
      
      def checkdb(self,database):
          global db1_check
          global db_bk
          try:
              conn = MySQLdb.connect(host=self.bhost,port=self.bport,user=self.buser,passwd=self.bpassword)
          except:
              print("源库连接信息错误，退回重填！")
          cur  = conn.cursor()
          sql = "SELECT information_schema.SCHEMATA.SCHEMA_NAME FROM information_schema.SCHEMATA where SCHEMA_NAME=\'{db}\';".format(db=database)
          results = cur.execute(sql)
          if not results:
               db1_check = 0
               print('查无此库,请重新输入,如忽略此项请输入"1"')
               #nodb = int(input('如果忽略此选项，请输入"1": '))
               #if nodb == 1:
               #   pass
          else:
               db1_check = 1
               db_bk = 1
               data = cur.fetchmany(results)
               cur.close()
               conn.commit()
               conn.close()
               for row in data:
                   row = row[0]
                   if row == database:
                        print('源库名正确')
      
      def check_rdb(self):
              global rdb_check
              try:
                conn = MySQLdb.connect(host=self.rhost,port=self.rport,user=self.ruser,passwd=self.rpassword)
                if conn:
                   rdb_check = 1
                   print(rdb_check)
                   pass
                else:
                   rdb_check = 0
                   print("目标库连接信息错误，退回重填！")
              except:
                   print("目标库连接信息错误，退回重填！")



      def backup(self):
             print("源库后台备份")     
             os.system("nohup ./mattdump -h {bhost} -P {bport} -u {buser} -p {bpwd} --regex=\"{bdatabase1}.*|{bdatabase2}.*|{bdatabase3}.*\" -L ./mattlog/mattdump_$(date \"+%Y%m%d%H%M%S\").log -v 3  -o ./mattdata >> ./mattlog/matt.log 2>&1 &".format(bhost=self.bhost,bport=self.bport,buser=self.buser,bpwd=self.bpassword,bdatabase1=self.bdatabase1,bdatabase2=self.bdatabase2,bdatabase3=self.bdatabase3))

      def restore(self):
          os.system("nohup ./mattload -h {rhost}  -P {rport} -u {ruser} -p {rpwd} -o -v 3 -d  ./mattdata >> ./mattlog/mattrestore_$(date \"+%Y%m%d%H%M%S\").log  2>&1 &".format(rhost=self.rhost,rport=self.rport,ruser=self.ruser,rpwd=self.rpassword))
      
      def syn(self):
          os.system("nohup ./mattsyn  --log-file ./mattlog/mattsyn.log  -config ./mattetc/mattsyn.conf > /dev/null 2>&1 &")


      def readlog(self):
          with open("./mattlog/mattsyn.log","r") as f:
               context = f.readlines()
               return context
                
      def get_binlog(self):
          with open("./mattdata/metadata","r") as f:
               context = f.readlines()
               return context


      def diff(self):
          os.system("nohup ./mattsync_diff   --config  ./mattetc/mattdiff.conf > ./mattlog/matt_diff_report.log 2>&1 &")


      def difflog(self):
          with open("./mattlog/matt_diff_report.log","r") as f:
               context = f.readlines()
               return context

      def stopsyn(self):
          os.system("kill -9 `lsof -t -i:8271` > /dev/null 2>&1 &")


      
def mulu():
         try:
             if os.path.isdir('./mattlog'):
                 pass
             else:
                 os.mkdir('./mattlog')
             if os.path.isdir('./mattetc'):
                 pass
             else:
                 os.mkdir('./mattetc')
             if os.path.isdir('./mattdata'):
                 pass
             else:
                 os.mkdir('./mattdata')
             if os.path.isfile('./mattetc/mattsyn.conf'):
                 pass
             else:
                 with open('./mattetc/mattsyn.conf','w+') as fetc:
                      fetc.writelines(['log-level = "info"\n', 'log-file = "mattsyn.log"\n', 'log-rotate = "day"\n', '\n', 'server-id = 300 \n', '\n', '## binlog起始信息文件地址\n', 'meta = "../mattetc/mattsyn.meta"\n', 'worker-count = 16\n', 'batch = 100\n', 'flavor = "mysql"\n', '\n', '#status-addr = ":8271"\n', '\n', 'stop-on-ddl = false\n', '\n', 'max-retry = 100\n', '\n', '# timezone = "Asia/Shanghai"\n', '\n', 'skip-ddls = ["ALTER USER", "CREATE TABLE", "DROP TABLE"]\n', '\n', '\n', '\n', '\n', '#replicate-do-db = ["~^b.*","s1"]\n', '\n', '\n', '#replicate-ignore-db = ["~^b.*","s1"]\n', '\n', '\n', '\n', '# [[skip-dmls]]\n', '# db-name = "foo"\n', '# tbl-name = "bar"\n', '# type = "delete"\n', '#\n', '\n', '# [[skip-dmls]]\n', '# type = "delete"\n', '#\n', '\n', '# [[skip-dmls]]\n', '# db-name = "foo"\n', '# type = "delete"\n', '\n', '\n', '\n', '#[[replicate-do-table]]\n', '#db-name ="dbname"\n', '#tbl-name = "table-name"\n', '\n', '#[[replicate-do-table]]\n', '#db-name ="dbname1"\n', '#tbl-name = "table-name1"\n', '\n', '\n', '#[[replicate-do-table]]\n', '#db-name ="test"\n', '#tbl-name = "~^a.*"\n', '\n', '\n', '#[[replicate-ignore-table]]\n', '#db-name = "your_db"\n', '#tbl-name = "your_table"\n', '\n', '\n', '#[[replicate-ignore-table]]\n', '#db-name ="test"\n', '#tbl-name = "~^a.*"\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '#[[route-rules]]\n', '#pattern-schema = "route_*"\n', '#pattern-table = "abc_*"\n', '#target-schema = "route"\n', '#target-table = "abc"\n', '\n', '#[[route-rules]]\n', '#pattern-schema = "route_*"\n', '#pattern-table = "xyz_*"\n', '#target-schema = "route"\n', '#target-table = "xyz"\n', '############################################################\n', '[from]\n', 'host = "192.168.0.82"\n', 'user = "ccc"\n', 'password = "jys#123"\n', 'port = 3306\n', '\n', '[to]\n', 'host = "192.168.0.101"\n', 'user = "root"\n', 'password = "jys#12345678"\n', 'port = 3306\n', '\n', '#############################################################\n'])

             if os.path.isfile('./mattetc/mattdiff.conf'):
                 pass
             else:
                 with open('./mattetc/mattdiff.conf','w+') as f:
                        f.writelines(['# mattDiff Configuration.\n', '\n', '######################### Global config #########################\n', '\n', '# 日志级别，可以设置为 info、debug\n', 'log-level = "info"\n', '\n', '# 对每一个 chunk 的数据进行对比。使用 chunk-size 设置 chunk 的大小\n', 'chunk-size = 100000\n', '\n', '# 检查数据的线程数量\n', 'check-thread-count = 4\n', '\n', '# 抽样检查的比例，如果设置为 100 则检查全部数据\n', 'sample-percent = 20 \n', '\n', '# 通过计算 chunk 的 checksum 来对比数据，如果不开启则逐行对比数据\n', 'use-checksum = true\n', '\n', '# 如果设置为 true 则只会通过计算 checksum 来校验数据，如果上下游的 checksum 不一致也不会查出数据再进行校验\n', 'only-use-checksum = false\n', '\n', '# 是否使用上次校验的 checkpoint，如果开启，则只校验上次未校验以及校验失败的 chunk\n', 'use-checkpoint = false\n', '\n', '# 不对比数据\n', 'ignore-data-check = false\n', '\n', '# 不对比表结构\n', 'ignore-struct-check = false\n', '\n', '\n', '######################### Tables config #########################\n', '\n', '\n', '# 配置需要对比的*目标数据库*中的表\n', '[[check-tables]]\n', '    # 目标库中数据库的名称\n', '       schema = "bainian"\n', "       schema = 'mmm'\n", '\n', '    # 需要检查的表\n', '    # tables = ["usertb",]\n', '\n', '    # 支持使用正则表达式配置检查的表，需要以‘~’开始，\n', '    # 下面的配置会检查所有表名以‘test’为前缀的表\n', '    # tables = ["~^test.*"]\n', '    # 下面的配置会检查配置库中所有的表\n', '      tables = ["~^"]\n', '\n', '\n', '\n', '######################### Databases config #########################\n', '\n', '# 源数据库实例的配置\n', '[[source-db]]\n', '    host = "192.168.0.82"\n', '    port = 3306\n', '    user = "root"\n', '    password = "jys#123"\n', '    # 源数据库实例的 id，唯一标识一个数据库实例\n', '    instance-id = "node2"\n', '\n', '# 目标数据库实例的配置\n', '[target-db]\n', '    host = "192.168.0.101"\n', '    port = 3306\n', '    user = "root"\n', '    password = "jys#12345678"\n']
)

             if os.path.isfile('./mattetc/mattsyn.meta'):
                 pass
             else:
                 with open('./mattetc/mattsyn.meta','w+') as synmeta:
                        synmeta.writelines(['binlog-name = ""\n', 'binlog-pos = 4\n', 'binlog-gtid = ""\n'])
         except:
             print('目录已经存在')
         

def menu():
        global db_bk
        while True:
                #try:
                        mattmatt = matt()
                        action = int(input("请输入选择项: "))
                        if action == 1:
                               mattmatt.dbsinfo()
                               if db_bk == 1: 
                                  mattmatt.backup()
                               else:
                                  print('用户忽略备份，返回主菜单')
                                  menu_print()

                        elif action == 2:
                               mattmatt.dbrinfo()
                               if rdb_check == 1: 
                                  print("目标库后台还原")
                               else:
                                  print("目标库连接错误，返回主菜单")
                                  menu_print()


                        elif action == 3:
                               mattmatt.diff()
                               print("校验数据开始")




                        elif action == 4:
                               mattmatt.stopsyn()
                               mattmatt.syn()
                               print("数据开始同步")

                        elif action == 5:
                               context = mattmatt.readlog()
                               for i in range(len(context)):
                                     print(context[i], end='\t')

                        elif action == 6:
                               context = mattmatt.difflog()
                               for i in range(len(context)):
                                     print(context[i], end='\t')

                        elif action == 7:
                               mattmatt.stopsyn()
                               print('实时增量同步已经停止')

                        elif action == 8:
                               #mattmatt = matt()
                               context = mattmatt.get_binlog()
                               for i in range(len(context)):
                                      print(context[i], end='\t')


                        elif action == 0:
                               menu_print()

                        elif action == 100:
                               break
                        else:
                               print("有错误，请重新输入")
                #except:
                              #print("输入错误，请返回主菜单!!")



def menu_print():
                print("\033[1;32;40m###################################################[mattmig v2.0控制台(mysql)]################################################\033[34m")
                print('mattmig介绍')
                print('   mattmig是一款利用binlog日志同步mysql数据库数据的软件，支持myisam、innodb引擎，实时同步业务数据库表数据。\n在使用前本软件前，建议用户检查源实例和目的实例的引擎、参数、字符集等是否一致，并不再进行DDL相关操作。\nmattmig打开时候会自动创建mattdata、mattetc、mattlog三个文件夹,分别存放备份文件、配置文件和日志文件。\n备份账号应具有RELOAD, REPLICATION SLAVE, REPLICATION CLIENT和该对象的权限。')
                print('')
                menu = '0:返回主菜单'
                print(menu.rjust(1))
                print('')
                dbbk = '1:全库备份'
                print(dbbk.rjust(1))
                print('')
                dbrestore = '2:全库还原'
                print(dbrestore.rjust(1))
                print('')
                check = '3:校验数据'
                print(check.rjust(1))
                print('')
                incre = '4:增量数据同步'
                print(incre.rjust(1))
                print('')
                vclog = '5:查看同步日志'
                print(vclog.rjust(1))
                print('')
                chlog = '6:查看校验日志'
                print(chlog.rjust(1))
                print('')
                stopsyn = '7:停止增量同步。'
                print(stopsyn.rjust(1))
                print('')
                logdir =  '8:查看源库biglog信息。'
                print(logdir.rjust(1))
                print('')
                logout = '100:退出'
                print(logout.rjust(1))
                print('')
                print('\033[1;32;40m####################################[Copyright Reserved by matt]###########################################################\033[0m')

def main():
     menu_print()
     mulu()
     menu()
     
    
    
if __name__=="__main__":
     main()
    
